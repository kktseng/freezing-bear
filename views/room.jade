extends layout

block head
  link(rel='stylesheet', href='/stylesheets/hoverbox.css')
  script(src='/javascripts/lib/api.js')
  script(src='/javascripts/lib/fabric.js')
  script(src='/javascripts/lib/canvasHelpers.js')
  script(src='/javascripts/lib/async.js')
  script(src='http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/sha1.js')

block content
  .row-fluid
    .span6
      |  Canvas
      canvas.canvas#c(width='500', height='500')
    .span5
      |  Chatbox
      .scrollbox.span8#chatbox
      |  Users
      .scrollbox.span4#userlist
  .row-fluid
    .input-append
      input.span4#chatInput(type='text')
      button.btn.btn-success#chatSubmit Chat
  .row-fluid
    button.btn.btn-danger#del Delete Image
  br  
  .row-fluid
    .span12
      .input-append
        input#query(type='text')
        button.btn.btn-primary#search Search For Image
      input(type='radio', name='source', value='flickr', checked=true) 
      |  Flickr 
      input(type='radio', name='source', value='tumblr') 
      |  Tumblr 
      input(type='radio', name='source', value='igram') 
      |  Instagram
  .row-fluid
    .span12
        ul.hoverbox 
          // cant use a for loop because jade generates html after hoverbox is calculated
          li#l0
            a(href='#')
              img#i0
              img#ip0.preview
          li#l1
            a(href='#')
              img#i1
              img#ip1.preview
          li#l2
            a(href='#')
              img#i2
              img#ip2.preview
          li#l3
            a(href='#')
              img#i3
              img#ip3.preview
          li#l4
            a(href='#')
              img#i4
              img#ip4.preview
          li#l5
            a(href='#')
              img#i5
              img#ip5.preview
          li#l6
            a(href='#')
              img#i6
              img#ip6.preview
          li#l7
            a(href='#')
              img#i7
              img#ip7.preview
          li#l8
            a(href='#')
              img#i8
              img#ip8.preview
          li#l9
            a(href='#')
              img#i9
              img#ip9.preview

block javascript
  script

    function updateUserList(userlist) {
      $('#userlist').text('');
      userlist.sort();
      userlist.forEach(function(user) {
        $('#userlist').append(newline('userlist') + user);
      });
    }

    $(function() {
      // hide images at first
      for(var i = 0; i < 10; i++) {
        $('#l' + i).hide();
      }

      var userlist = [];
      var socket = io.connect('http://localhost:3000');

      socket.on('connect', function() {
        socket.emit('joinRoom', '#{room}');
      });

      // submitting chat messages
      $('#chatSubmit').click(function() {
        socket.emit('sendChat', $('#chatInput').val());
      });

      $('.preview').click(function() {
        var url = $(this).attr('src');
        addImg(url, 100, 100, function(image) {
          var hash_id = '' + CryptoJS.SHA1(image.get('src') + new Date() + image.get('left') + image.get('top') + '0' + '100' + '100');
          image.set('img_id', hash_id);
          canvas.add(image);
          socket.emit('addImage', '#{room}', '' + hash_id, JSON.stringify(image));
        });
      });



      // canvas
      var canvas = new fabric.Canvas('c');

      var updateCanvas = function(canvas_state) {
        var prev_canvas_items = canvas.getObjects();

        prev_canvas_items.forEach(function(prev_item) {
          var item = canvas_state[prev_item.get('img_id')];
          if (item) {
            if (item.left !== prev_item.get('left')) {
              prev_item.set('left', item.left);
            }
            if (item.top !== prev_item.get('top')) {
              prev_item.set('top', item.top);
            }
            if (item.width !== prev_item.getWidth()) {
              prev_item.set('width', item.width);
            }
            if (item.height != prev_item.getHeight()) {
              prev_item.set('height', item.height);
            }
            if (item.angle != prev_item.getAngle()) {
              prev_item.set('angle', item.angle);
            }
            delete canvas_state[prev_item.get('img_id')];
          } else {
            canvas.remove(prev_item);
          }
        });

        var keys = Object.keys(canvas_state);
        keys.forEach(function(id) {
          var new_item = canvas_state[id];
          addImg(new_item.src, new_item.left, new_item.top, function(image) {
              image.set('angle', new_item.angle);
              image.set('width', new_item.width);
              image.set('height', new_item.height);
              image.set('img_id', id);
              canvas.add(image);
              //cb();
          });
        });

        canvas.renderAll();
      };



      // tests getState function
      setTimeout(function(){getState(canvas)}, 1000);

      // handle canvas events
      var sendState = function(e) {
        socket.emit('modifyImage', '#{room}', '' + e.target.get('img_id'), JSON.stringify(getItemState(e.target)));
      }
      canvas.observe('object:modified', sendState);
      
      canvas.observe('object:scaling', function(e) {
        cappedSendState(e, sendState);
      });
      canvas.observe('object:moving', function(e) {
        cappedSendState(e, sendState);
      });
      canvas.observe('object:rotating', function(e) {
        cappedSendState(e, sendState);
      });
      

      // socket events
      socket.on('userlist', function(users) {
        userlist = users;
        updateUserList(userlist);
      });
      socket.on('updateChat', function(username, message) {
        $('#chatbox').append(newline('chatbox') + username + ': ' + message);
      });
      socket.on('userConnect', function(username) {
        userlist.push(username);
        updateUserList(userlist);
      });
      socket.on('userDisconnect', function(username) {
        if(userlist.indexOf(username) >= 0) {
          userlist.splice(userlist.indexOf(username), 1);
          updateUserList(userlist);
        }
      });
      socket.on('images', function(images) {
        updateCanvas(JSON.parse(images));
      });

      // prompt username
      var username = prompt('What is your username?');
      if(username === '')
        username = 'Anon';
      socket.emit('setUser', username);

      // delete
      $('#del').click(function() {
        socket.emit('deleteImage', '#{room}', canvas.getActiveObject().get('img_id'));
      });

      // search
      var index = 1;


      $('input:radio[name=source]').change(function() {
        index = 1;
      });

      $("#query").keypress(function() {
        index = 1;
      });

      $('#search').click(function() {
        var source = $('input:radio[name=source]:checked').val();
        var query = $('#query').val();
        query = query.replace(/[^a-z0-9]/gi, '+').toLowerCase();
        var callback = function(arr) {
          for(var i = 0; i < arr.length; i++) {
            $('#l' + i).show();
            $('#i' + i).attr('src', arr[i]);
            $('#ip' + i).attr('src', arr[i]);
          }
          for(var i = 9; i >= arr.length; i--) {
            $('#l' + i).hide();
          }
        };
        if(source === 'flickr') 
        {
        flickrAPI(query, callback, index);
        index += 1;
        }
        if(source === 'tumblr') tumblrAPI(query, callback, index);
        if(source === 'igram') instagramAPI(query, callback, index-1);
      });
    });