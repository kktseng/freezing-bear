extends layout

block head
  link(rel='stylesheet', href='/stylesheets/hoverbox.css')
  link(rel='stylesheet', href='/stylesheets/spectrum.css')
  link(href='http://fonts.googleapis.com/css?family=Anton', rel='stylesheet', type='text/css')
  link(href='http://fonts.googleapis.com/css?family=Gudea', rel='stylesheet', type='text/css')
  link(href='http://fonts.googleapis.com/css?family=Abril+Fatface', rel='stylesheet', type='text/css')
  link(href='http://fonts.googleapis.com/css?family=Trocchi', rel='stylesheet', type='text/css')
  link(href='http://fonts.googleapis.com/css?family=Pacifico', rel='stylesheet', type='text/css')
  script(src='/javascripts/lib/api.js')
  script(src='/javascripts/lib/fabric.js')
  script(src='/javascripts/lib/canvasHelpers.js')
  script(src='/javascripts/lib/async.js')
  script(src='http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/sha1.js')
  script(src='/javascripts/lib/spectrum.js')

block content

  div(class="background")
  
  div(class='topBannerOutline')
  div(class='topBannerOutlineLogo')
  div(class='topBannerOutlineLogoTwo')
  div(id='topBanner')
    img(class='title_img', src='/images/freezing_bear_logo.png', width='40px')
    a(class='title', href='/') freezing 
    a(class='title', href='/', style='color: #E3B79D') bear.
  
  div(class="canvasStyle")
    div(class="innerStyle")
      div(class="pAlignCanvas")
        p CANVAS
        br
        div(class="inLine")
          p CREATE YOUR WORK HERE
          span(class="spanLine")
    canvas.canvas#c(width='650', height='400')
        
  div(class="chatTitleStyle")
    div(class="innerStyle")
      div(class="pAlignChatbox")
        p CHATBOX
        div(class="inLineChatbox")
          p COLLABORATOR CHAT
          span(class="spanChat")
  div(class="userListOutline")
    div(class="innerStyle")
  div(class="chatboxStyle")
    #chatbox
  div(class="pOnline")
    #userlist
  div(class="pAlignOnline")
    p Users currently online
 
  div(class="toggleBarStyle")
    div(class="innerStyle")
      button.deleteButton#del delete
      button.deleteButton#drawMode draw mode
      button.deleteButton#clear clear canvas
      input#color(type='color')
  div(class="slider")
    div#slider(style='width: 100px')
  div(class="pictureSelector")
    div(class="innerStyle")
  div(class="searchText")
    p   search for images
  div(class="searchBox")
      input#query(type='text')
      button.deleteButton#search search
      input(type='radio', name='source', value='flickr', checked=true) 
      | Flickr <img src="/images/flickr.png">
      input(type='radio', name='source', value='tumblr') 
      | Tumblr <img src="/images/tumblr.png">
      input(type='radio', name='source', value='igram') 
      | Instagram <img src="/images/instagram.png">

  
  div(class="pictureDisplay")
   ul.hoverbox 
    - for (var i = 0; i < 10; ++i) {
      li(id='l' + '#{i}')
        a(href='#')
          img(id='i' + '#{i}')
          img.preview(id='ip' + '#{i}')
    - }
    

  div(class="bottomBanner")
    p <font color=#E3B79D>an open-source web-mashup by </font>Dennis Li, Alex Leung, Kevin Tseng, Kunaal Wadhwa and Bryan Yasukawa <font color=#E3B79D>(2012)</font>
 
 block javascript
  script

    function updateUserList(userlist) {
      $('#userlist').text('');
      userlist.sort();
      userlist.forEach(function(user) {
        $('#userlist').append(newline('userlist') + user);
      });
    }

    $(function() {
      var movingPic;
      var userlist = [];
      var socket = io.connect('http://localhost:3000');
      var canvas = new fabric.Canvas('c');
      var all_canvas_paths = [];
      canvas.freeDrawingColor = '#000000';

      // set up slider
      $('#slider').slider({
        change: function() {
          canvas.freeDrawingLineWidth = parseInt($("#slider").slider("option","value"))/10;
        }
      });

      // hide images at first
      for(var i = 0; i < 10; i++) {
        $('#l' + i).hide();
      }

      $('#color').change(function() {
        canvas.freeDrawingColor = $('#color').val();
      });

      // submitting chat messages
      $('#chatSubmit').click(function() {
        socket.emit('sendChat', $('#chatInput').val());
      });

      // adding images
      $('.preview').click(function() {
        var url = $(this).attr('src');
        addImg(url, 100, 100, function(image) {
          var hash_id = '' + CryptoJS.SHA1(image.get('src') + new Date() + image.get('left') + image.get('top') + '0' + '100' + '100');
          image.set('img_id', hash_id);
          canvas.add(image);
          updateCanvasPaths(all_canvas_paths);
          socket.emit('addImage', '#{room}', '' + hash_id, JSON.stringify(image));
        });
      });

      // handle canvas events
      var sendState = function(e) {
        socket.emit('modifyImage', '#{room}', '' + e.target.get('img_id'), JSON.stringify(getItemState(e.target)));
      }
      var sendPaths = function(e, path_color, path_width) {
        socket.emit('addPath', '#{room}', JSON.stringify(e), path_color, path_width);
      }

      // canvas events      
      canvas.observe('object:scaling', function(e) {
        movingPic = e.target.get('img_id');
        cappedSendState(e, sendState);
      });
      canvas.observe('object:moving', function(e) {
        movingPic = e.target.get('img_id');
        cappedSendState(e, sendState);
      });
      canvas.observe('object:rotating', function(e) {
        movingPic = e.target.get('img_id');
        cappedSendState(e, sendState);
      });
      canvas.observe('object:modified', function(e) {
        movingPic = null;
        sendState(e);
      });
      canvas.observe('path:created', function(e) {
        sendPaths(e);
      });
      
      //canvas updaters
      var updateCanvas = function(canvas_state) {
        var prev_canvas_items = canvas.getObjects();

        prev_canvas_items.forEach(function(prev_item) {
          if(movingPic != prev_item.get('img_id')) {
            var item = canvas_state[prev_item.get('img_id')];
            if (item) {
              if (item.left !== prev_item.get('left')) prev_item.set('left', item.left);
              if (item.top !== prev_item.get('top')) prev_item.set('top', item.top);
              if (item.width !== prev_item.getWidth()) prev_item.set('width', item.width);
              if (item.height != prev_item.getHeight()) prev_item.set('height', item.height);
              if (item.angle != prev_item.getAngle()) prev_item.set('angle', item.angle);
              delete canvas_state[prev_item.get('img_id')];
            } else {
              if(prev_item.getSrc) canvas.remove(prev_item);
            }
          } else delete canvas_state[movingPic];
          canvas.renderAll();
        });

        var keys = Object.keys(canvas_state);
        keys.forEach(function(id) {
          var new_item = canvas_state[id];
          addImg(new_item.src, new_item.left, new_item.top, function(image) {
              image.set('angle', new_item.angle);
              image.set('width', new_item.width);
              image.set('height', new_item.height);
              image.set('img_id', id);
              canvas.add(image);
              // do this in case any async images were uploaded
              if(keys.length > 0) {
                updateCanvasPaths(all_canvas_paths);
              }
          });
        });
      };

      var updateCanvasPaths = function(canvas_paths) {
        console.log("!!");
        var path;
        var canvas_objs = canvas.getObjects();
        canvas_objs.forEach(function(obj) {
          if(obj.type === 'path') {
            canvas.remove(obj);
          }
        });
        canvas_paths.forEach(function(canvas_path) {
          path = new fabric.Path(canvas_path.path.path);
          path.set('fill', 'transparent');
          path.set('left', canvas_path.path.left);
          path.set('top', canvas_path.path.top);
          path.set('width', canvas_path.path.width);
          path.set('height', canvas_path.path.height);
          path.set('stroke', canvas_path.path.stroke);
          path.set('strokeWidth', canvas_path.path.strokeWidth);
          path.selectable = false;
          canvas.add(path);
        });

        canvas.renderAll();
      };

      // socket events
      socket.on('connect', function() {
        socket.emit('joinRoom', '#{room}');
      });
      socket.on('userlist', function(users) {
        userlist = users;
        updateUserList(userlist);
      });
      socket.on('updateChat', function(username, message) {
        $('#chatbox').append(newline('chatbox') + username + ': ' + message);
      });
      socket.on('userConnect', function(username) {
        userlist.push(username);
        updateUserList(userlist);
      });
      socket.on('userDisconnect', function(username) {
        if(userlist.indexOf(username) >= 0) {
          userlist.splice(userlist.indexOf(username), 1);
          updateUserList(userlist);
        }
      });
      socket.on('images', function(images) {
        updateCanvas(JSON.parse(images));
      });
      socket.on('paths', function(paths) {
        all_canvas_paths = JSON.parse(paths);
        updateCanvasPaths(all_canvas_paths);
      });
      socket.on('clear', function() {
        canvas.clear();
        all_canvas_paths = [];
      });

      // prompt username
      var username = prompt('What is your username?');
      if(username === '' || username === 'null')
        username = 'Anon';
      socket.emit('setUser', username);

      // delete
      $('#del').click(function() {
        socket.emit('deleteImage', '#{room}', canvas.getActiveObject().get('img_id'));
      });

      // toggle drawing and image mode
      $('#drawMode').click(function() {
        canvas.isDrawingMode = !(canvas.isDrawingMode);
      });

      // clear canvas
      $('#clear').click(function() {
        canvas.clear();
        all_canvas_paths = [];
        socket.emit('clear');
      });

      // search
      var index = 1;
      $('input:radio[name=source]').change(function() {
        index = 1;
      });

      $("#query").keypress(function() {
        index = 1;
      });

      $('#search').click(function() {
        var source = $('input:radio[name=source]:checked').val();
        var query = $('#query').val();
        query = query.replace(/[^a-z0-9]/gi, '+').toLowerCase();
        var callback = function(arr) {
          for(var i = 0; i < arr.length; i++) {
            $('#l' + i).show();
            $('#i' + i).attr('src', arr[i]);
            $('#ip' + i).attr('src', arr[i]);
          }
          for(var i = 9; i >= arr.length; i--) {
            $('#l' + i).hide();
          }
        };
       if(source === 'flickr') {
        flickrAPI(query, callback, index);
        index += 1;
        } else if(source === 'tumblr') {
          tumblrAPI(query, callback);
        } else if(source === 'igram') {
          instagramAPI(query, callback,index-1);
          index += 1;
        }
      });
    });