extends layout

block head
  script(src='/javascripts/lib/fabric.js')
  script(src='/javascripts/lib/canvasHelpers.js')
  script(src='http://crypto-js.googlecode.com/svn/tags/3.0.2/build/rollups/sha1.js')

block content
  .row-fluid
    .span6
      canvas.canvas#c(width='500', height='500')
    .span5
      .scrollbox.span8#chatbox
      .scrollbox.span4#userlist
      .row-fluid
        .input-append
          input.span8#chatInput(type='text')
          button.btn#chatSubmit Submit

block javascript
  script

    function updateUserList(userlist) {
      $('#userlist').text('');
      userlist.sort();
      userlist.forEach(function(user) {
        $('#userlist').append(newline('userlist') + user);
      });
    }

    $(function() {
      var userlist = [];

      // socketio
      var socket = io.connect('http://localhost:3000');
      socket.on('connect', function() {
        socket.emit('joinRoom', '#{room}');
      });
      socket.on('userlist', function(users) {
        userlist = users;
        updateUserList(userlist);
      });
      socket.on('updateChat', function(username, message) {
        $('#chatbox').append(newline('chatbox') + username + ': ' + message);
      });
      socket.on('userConnect', function(username) {
        userlist.push(username);
        updateUserList(userlist);
      });
      socket.on('userDisconnect', function(username) {
        if(userlist.indexOf(username) >= 0) {
          userlist.splice(userlist.indexOf(username), 1);
          updateUserList(userlist);
        }
      });

      // prompt username
      var username = prompt('What is your username?');
      if(username === '')
        username = 'Anon';
      socket.emit('setUser', username);

      // submitting chat messages
      $('#chatSubmit').click(function() {
        socket.emit('sendChat', $('#chatInput').val());
      });

      // canvas
      var canvas = new fabric.Canvas('c');

      var updateCanvas = function(canvas_state){
        var prev_canvas_items = canvas.getObjects();

        prev_canvas_items.forEach(function(prev_item) {
          var item = canvas_state[prev_item.get('img_id')];
          if (item) {
            if (item.left !== prev_item.get('left')) {
              prev_item.set('left', item.left);
            }
            if (item.up !== prev_item.get('up')) {
              prev_item.set('up', item.up);
            }
            if (item.width !== prev_item.getWidth()) {
              prev_item.set('width', item.width);
            }
            if (item.height != prev_item.getHeight()) {
              prev_item.set('height', item.height);
            }
            if (item.angle != prev_item.getAngle()) {
              prev_item.set('angle', item.angle);
            }
          }
        });

        canvas.renderAll();
      };
    
      /*
      for (var i = 0, len = 15; i < len; i++) {
        var left = fabric.util.getRandomInt(0, 600);
        var up = fabric.util.getRandomInt(0, 500)
        addImg(canvas, 'http://www.cbre.com.hk/ServiceLines/PublishingImages/Alex%20Leung.jpg', left, up);
      }
      */
      
      //Add images to canvas:
      addImg('http://www.cbre.com.hk/ServiceLines/PublishingImages/Alex%20Leung.jpg', 100, 100, canvas.add.bind(canvas));
      addImg('http://images.nationalgeographic.com/wpf/media-live/photos/000/005/cache/domestic-cat_516_600x450.jpg', 300, 300, canvas.add.bind(canvas));

      /*
      This is for testing purposes only; we will be passed a JSON object from server
      that will represent cs.
      Tests updateCanvas function.
      */
      setTimeout(function(){
        var cs = {};
        cs[canvas.item(0).get('img_id')] = { 'url' : 'http://images.nationalgeographic.com/wpf/media-live/photos/000/005/cache/domestic-cat_516_600x450.jpg',
                    'left' : 100,
                    'up' : 100,
                    'width' : 500,
                    'height' : 500,
                    'angle' : 0 };

        cs[canvas.item(1).get('img_id')] = { 'url' : 'http://www.cbre.com.hk/ServiceLines/PublishingImages/Alex%20Leung.jpg',
                    'left' : 300,
                    'up' : 300,
                    'width' : 100,
                    'height' : 100,
                    'angle' : 0
                  };
        console.log('cs ' + JSON.stringify(cs));
        updateCanvas(cs);
      },1000);


      //Tests getState function
      setTimeout(function(){getState(canvas)}, 1000);

      // handle canvas events
      canvas.observe('object:modified', sendState);
      canvas.observe('object:scaling', cappedSendState);
      canvas.observe('object:moving', cappedSendState);
      canvas.observe('object:rotating', cappedSendState);

    });